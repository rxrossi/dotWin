call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'mattn/emmet-vim'
Plug 'raimondi/delimitmate'
Plug 'w0rp/ale'
Plug 'kien/ctrlp.vim'
Plug 'styled-components/vim-styled-components'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'farmergreg/vim-lastplace'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-projectionist'
Plug 'sheerun/vim-polyglot'
Plug 'bling/vim-airline'

if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
 Plug 'Shougo/deoplete.nvim'
 Plug 'roxma/nvim-yarp'
 Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

call plug#end()

let g:deoplete#enable_at_startup = 1

"ALE config
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 1
let g:ale_fixers = {
 \   'javascript': ['prettier','eslint'],
\}
let g:ale_fix_on_save = 1
"nnoremap <leader>an :alenextwrap<cr>
"nnoremap <leader>ap :alepreviouswrap<cr>

" CtrlP custom Settings
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/](\.git|\.hg|\.svn|_site|node_modules)$',
\ 'file': '\v\.(exe|so|dll)$',
\ 'link': 'some_bad_symbolic_links',
\ }
let g:ctrlp_working_path_mode = 'ra'

" uncategorized yet vim settings
set wildmenu
set noswapfile
set shortmess=A
set linebreak
set mouse=a
set relativenumber
set number
set scrolloff=5
:set tabstop=2 shiftwidth=2 expandtab

" Make Y behave like C and D
nnoremap Y y$

" NerdTree
:nmap <c-n> :NERDTreeToggle<CR>

" Ctrl a sendes Ctrl A, useful for projectionist
:nmap <c-a> :A<CR>

" save with Ctrl+s
:nmap <c-s> :w<CR>
:imap <c-s> <Esc>:w<CR>

" ctrl l redraw and clears ALE
:nmap <c-l> :redr<Bar>ALEReset<Bar>ALELint<CR>
:imap <c-l> <Esc>:redr<Bar>ALEReset<Bar>ALELint<CR>


" Map leader key
map <space> <leader>

" autchdir because of relative path on import of Js
set autochdir

" air-line
let g:airline_powerline_fonts = 1

" " vim-jsx enable for .js
let g:jsx_ext_required = 0

" emmet
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}

" Plugin key-mappings.
let g:neosnippet#snippets_directory='~/.local/share/nvim/my-snippets/'
let g:neosnippet#expand_word_boundary = 1
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
"
" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
 \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif"
let g:neosnippet#snippets_directory='~/dotWin/vim/my-snippets'

colorscheme delek
